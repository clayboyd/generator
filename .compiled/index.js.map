{"version":3,"sources":["../index.js"],"names":["console","log","context","src","title","_capitalize","utils","capitalize","m","defaultModel","genModel","model","gen","createTemplates","then","generate","promises","classes","map","ctx","Object","assign","clazz","clz","JSON","stringify","Promise","all"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,QAAQC,GAAR,CAAY,UAAZ;;AAEA,IAAIC,UAAU;AACVC,SAAK,QADK;AAEVC,WAAO,OAFG;AAGVC,iBAAaC,gBAAMC;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAXc,CAAd,CAaAP,QAAQC,GAAR,CAAY,QAAZ;;AAEA;AACA,IAAIO,IAAIC,uBAAaC,QAAb,CAAsBC,eAAtB,CAAR;AACA;;AAEAT,QAAQS,KAAR,GAAgBH,CAAhB;;AAEAI,oBAAIC,eAAJ,CAAoB,0BAApB,EACKC,IADL,CACUF,oBAAIC,eAAJ,CAAoB,0BAApB,CADV,EAEKC,IAFL,CAEU;AAAA,WAAMF,oBAAIG,QAAJ,CAAa,0BAAb,EAAwC,QAAxC,EAAkDb,OAAlD,CAAN;AAAA,CAFV,EAGKY,IAHL,CAGW,YAAM;AACT,QAAME,WAAYR,EAAES,OAAF,CAAUC,GAAV,CAAe,eAAO;AACpC,YAAIC,MAAMC,OAAOC,MAAP,CAAc,EAAd,EAAkBnB,OAAlB,CAAV;AACAiB,YAAIG,KAAJ,GAAYC,GAAZ;AACAvB,gBAAQC,GAAR,CAAYuB,KAAKC,SAAL,CAAeN,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAZ;AACA,eAAOP,oBAAIG,QAAJ,CAAa,0BAAb,EAAyC,QAAzC,EAAmDI,GAAnD,CAAP;AACH,KALiB,CAAlB;AAMA,WAAOO,QAAQC,GAAR,CAAaX,QAAb,CAAP;AACH,CAXL","file":"index.js","sourcesContent":["\nimport gen from './src/generator'\nimport model from './model'\nimport defaultModel from './src/defaultModel'\nimport utils from './src/utils'\n\nconsole.log(\"Starting\")\n\nlet context = {\n    src: 'source',\n    title: 'howdy',\n    _capitalize: utils.capitalize\n}\n// gen('./testing/templates','./testing/destination', context)\n// .then( () => console.log('it is over'))\n// .then( () => gen('./testing/templates','./testing/destination2', context))\n// .then( () => console.log('it is over'))\n// .then( () => gen('./testing/templates','./testing/destination3', context))\n// .then( () => console.log('it is over'))\n// .catch(err => console.log(err))\n\nconsole.log('Ending')\n\n//console.log(JSON.stringify(model, null, 2))\nlet m = defaultModel.genModel(model);\n//console.log(JSON.stringify(m, null, 2))\n\ncontext.model = m;\n\ngen.createTemplates('./testing/templates/once')\n    .then(gen.createTemplates('./testing/templates/each'))\n    .then(() => gen.generate('./testing/templates/once','../uut', context))\n    .then( () => {\n        const promises =  m.classes.map( clz => {\n            let ctx = Object.assign({}, context);\n            ctx.clazz = clz;\n            console.log(JSON.stringify(ctx, null, 2))\n            return gen.generate('./testing/templates/each', '../uut', ctx);\n        });\n        return Promise.all( promises )\n    })\n"]}