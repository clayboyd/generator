{"version":3,"sources":["../../src/templates.js"],"names":["templates","transform","template","context","_","isString","Handlebars","compile","getTemplate","fname","Promise","resolve","reject","console","log","utils","readFileP","then","data","toString","all","module","exports"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;AAEA,IAAIA,YAAY,EAAhB;;AAEA,SAASC,SAAT,CAAoBC,QAApB,EAA8BC,OAA9B,EAAwC;AACpC,QAAIC,iBAAEC,QAAF,CAAWH,QAAX,CAAJ,EAA0B;AACtBA,mBAAWI,qBAAWC,OAAX,CAAmBL,QAAnB,CAAX;AACH;AACD,WAAOA,SAASC,OAAT,CAAP;AACH;;AAED,SAASK,WAAT,CAAsBC,KAAtB,EAA8B;AAC1B,WAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,YAAIH,SAAST,SAAb,EAAwB;AACpBa,oBAAQC,GAAR,qBAA8BL,KAA9B;AACAE,oBAASX,UAAUS,KAAV,CAAT;AACH,SAHD,MAIK;AACDI,oBAAQC,GAAR,2BAAoCL,KAApC;AACAM,4BAAMC,SAAN,CAAiBP,KAAjB,EACKQ,IADL,CACW,gBAAQ;AACX,oBAAMf,WAAWI,qBAAWC,OAAX,CAAoBW,KAAKC,QAAL,EAApB,CAAjB;AACA,oBAAI,CAACnB,UAAUS,KAAV,CAAL,EAAuB;AACnBT,8BAAUS,KAAV,IAAmBP,QAAnB;AACH;AACDS,wBAAST,QAAT;AACH,aAPL;AAQH;AACJ,KAhBM,CAAP;AAiBH;;AAED,SAASkB,GAAT,GAAe;AACX,WAAOpB,SAAP;AACH;;kBAEc;AACXQ,4BADW;AAEXP,wBAFW;AAGXmB;AAHW,C;;;AAMfC,OAAOC,OAAP,GAAiB;AACbd,4BADa;AAEbP,wBAFa;AAGbmB;AAHa,CAAjB","file":"templates.js","sourcesContent":["import Handlebars from 'handlebars'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport helpers from './helpers'\nimport utils from './utils'\n\n// This caches the compiled templates, saves them by filename\n\nvar templates = {}\n\nfunction transform( template, context ) {\n    if (_.isString(template)) {\n        template = Handlebars.compile(template)\n    }\n    return template(context)\n}\n\nfunction getTemplate( fname ) {\n    return new Promise( (resolve, reject) => {\n        if (fname in templates) {\n            console.log(`cache hit with ${fname}`)\n            resolve( templates[fname] )\n        }\n        else {\n            console.log(`called readfile with ${fname}`)\n            utils.readFileP( fname )\n                .then( data => {\n                    const template = Handlebars.compile( data.toString() );\n                    if (!templates[fname]) {\n                        templates[fname] = template\n                    }\n                    resolve( template )\n                })\n        }\n    })\n}\n\nfunction all() {\n    return templates\n}\n\nexport default {\n    getTemplate,\n    transform,\n    all\n}\n\nmodule.exports = {\n    getTemplate,\n    transform,\n    all\n}"]}