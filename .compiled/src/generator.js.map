{"version":3,"sources":["../../src/generator.js"],"names":["generate","generateOne","destname","template","context","Promise","resolve","reject","console","log","templates","transform","utils","writeFileP","src","dest","globP","then","files","createTemplates","map","getTemplate","item","all","Object","keys"],"mappings":";;;;;kBAYwBA,Q;;AAXxB;;;;AACA;;;;;;AAEA,SAASC,WAAT,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0CC,OAA1C,EAAmD;AAC/C,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAsB;AACrCC,gBAAQC,GAAR,iBAA0BP,QAA1B;AACAC,mBAAWO,oBAAUC,SAAV,CAAqBR,QAArB,EAA+BC,OAA/B,CAAX;AACAE,gBAAQM,gBAAMC,UAAN,CAAkBX,QAAlB,EAA4BC,QAA5B,EAAsC,OAAtC,CAAR;AACH,KAJM,CAAP;AAKH;;AAEc,SAASH,QAAT,CAAkBc,GAAlB,EAAuBC,IAAvB,EAA6BX,OAA7B,EAAuC;AAClDI,YAAQC,GAAR,YAAqBK,GAArB,iBAAoCC,IAApC;AACA,WAAOH,gBAAMI,KAAN,CAAYF,MAAM,SAAlB,EACFG,IADE,CACI,UAACC,KAAD,EAAW;;AAEd,YAAIC,kBAAkBD,MAAME,GAAN,CAAW,gBAAQ;AACrC,mBAAOV,oBAAUW,WAAV,CAAuBC,IAAvB,CAAP;AACH,SAFqB,CAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAOjB,QAAQkB,GAAR,CAAYJ,eAAZ,EACNF,IADM,CACD;AAAA,mBAAMT,QAAQC,GAAR,CAAYe,OAAOC,IAAP,CAAYf,oBAAUa,GAAV,EAAZ,CAAZ,CAAN;AAAA,SADC,CAAP;AAEA;AACA;AACP,KApBM,CAAP;AAqBH","file":"generator.js","sourcesContent":["\nimport templates from './templates'\nimport utils from './utils'\n\nfunction generateOne( destname, template, context) {\n    return new Promise((resolve, reject ) => {\n        console.log(`destname = ${destname}`)\n        template = templates.transform( template, context )\n        resolve(utils.writeFileP( destname, template, 'write' ))\n    })\n}\n\nexport default function generate(src, dest, context ) {\n    console.log(`src = ${src}, dest = ${dest}`)\n    return utils.globP(src + '/**/*.*')\n        .then ((files) => {\n\n            let createTemplates = files.map( item => {\n                return templates.getTemplate( item )\n            });\n            // let promises = files.map( (item) => {\n            //     let ctx = Object.assign({}, context)\n            //     let destname = item.replace(src, dest);\n            //     destname = templates.transform( destname, ctx );\n            //     ctx.FILE_NAME = destname\n            //     ctx.TEMPLATE_NAME = item\n            //     return templates.getTemplate( item ).then( (template) => {\n            //         return generateOne( destname, template, ctx )\n            //     })\n            // })\n            return Promise.all(createTemplates)\n            .then(() => console.log(Object.keys(templates.all())))           \n            // .then(Promise.all(createTemplates))\n            // .then(() => console.log(Object.keys(templates.all())))\n    });  \n}"]}