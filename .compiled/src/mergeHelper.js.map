{"version":3,"sources":["../../src/mergeHelper.js"],"names":["fs","require","mkdirp","path","mergeAction","answers","config","plop","sections","src","readFileSync","sourceFileName","encoding","dest","destFileName","err","p","dirname","sync","writeFileSync","replace","match","$1","$2","offset","original","push","data","newDest","forEach","stg","key","regexp","RegExp","$3","mergeFolders","allNames","getFileNames","dir","stat","statSync","isFile","names","readdirSync","name","join","srcFolder","actions","map","fname","destFolder","type","module","exports"],"mappings":";;AACA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;AACA;;;;;;;;;;;;;;;AAeA;;;AAGA,SAASG,WAAT,CAAsBC,OAAtB,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA8C;AAC5C,MAAIC,WAAW,EAAf;AACA,MAAMC,MAAMT,GAAGU,YAAH,CAAgBJ,OAAOK,cAAvB,EAAuC,EAACC,UAAU,OAAX,EAAvC,CAAZ;AACA,MAAIC,aAAJ;AACA,MAAI;AACFA,WAAOb,GAAGU,YAAH,CAAgBJ,OAAOQ,YAAvB,EAAqC,EAACF,UAAU,OAAX,EAArC,CAAP;AACD,GAFD,CAGA,OAAMG,GAAN,EAAW;AACT;AACA,QAAIC,IAAIb,KAAKc,OAAL,CAAcX,OAAOQ,YAArB,CAAR;AACAZ,WAAOgB,IAAP,CAAaF,CAAb;AACAhB,OAAGmB,aAAH,CAAiBb,OAAOQ,YAAxB,EAAsCL,GAAtC;AACA,WAAO,eAAeH,OAAOQ,YAA7B;AACD;;AAEH;AACED,OAAKO,OAAL,CAAa,qBAAb,EAAoC,UAASC,KAAT,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,MAAxB,EAAgCC,QAAhC,EAA0C;AAC5EjB,aAASkB,IAAT,CAAcJ,EAAd;AACD,GAFD;;AAIA;;AAEA,MAAIK,OAAO,EAAX;AACA,MAAIC,UAAUnB,GAAd;AACAD,WAASqB,OAAT,CAAkB,eAAO;AACvB,QAAIC,mBAAiBC,GAAjB,kCAAiDA,GAAjD,UAAJ;AACA;AACA,QAAIC,SAAS,IAAIC,MAAJ,CAAWH,GAAX,EAAgB,GAAhB,CAAb;AACAjB,SAAKO,OAAL,CAAaY,MAAb,EAAqB,UAAUX,KAAV,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBW,EAAzB,EAA6BV,MAA7B,EAAqCC,QAArC,EAA+C;AAClEE,WAAKI,GAAL,IAAYR,EAAZ;AACD,KAFD;AAGAK,cAAUA,QAAQR,OAAR,CAAgBY,MAAhB,EAAwB,UAASX,KAAT,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBW,EAAxB,EAA4B;AAC5D,aAAOZ,KAAKK,KAAKI,GAAL,CAAL,GAAiBG,EAAxB;AACD,KAFS,CAAV;AAGD,GAVD;;AAYA;AACA;;AAEA,MAAIN,YAAYf,IAAhB,EAAuB;AACrBb,OAAGmB,aAAH,CAAkBb,OAAOQ,YAAzB,EAAuCc,OAAvC;AACA,WAAO,mBAAmBtB,OAAOQ,YAAjC;AACD;AACD,SAAO,mBAAP;AACD;;AAED,SAASqB,YAAT,CAAuB9B,OAAvB,EAAiC;AAC/B,MAAI+B,WAAW,EAAf;;AAEA,WAASC,YAAT,CAAuBC,GAAvB,EAA6B;AAC3B,QAAIC,OAAOvC,GAAGwC,QAAH,CAAaF,GAAb,CAAX;AACA,QAAIC,KAAKE,MAAL,EAAJ,EAAmB;AACjBL,eAASV,IAAT,CAAeY,GAAf;AACD,KAFD,MAGK;AACH,UAAII,QAAQ1C,GAAG2C,WAAH,CAAgBL,GAAhB,CAAZ;AACAI,YAAMb,OAAN,CAAe,UAACe,IAAD,EAAU;AACvBP,qBAAclC,KAAK0C,IAAL,CAAWP,GAAX,EAAgBM,IAAhB,CAAd;AACD,OAFD;AAGD;AACF;;AAEDP,eAAchC,QAAQyC,SAAtB;;AAEA,MAAIC,UAAUX,SAASY,GAAT,CAAc,UAACC,KAAD,EAAW;AACrCA,YAAQ,OAAOA,KAAf;AACA,QAAInC,eAAemC,MAAM7B,OAAN,CAAef,QAAQyC,SAAvB,EAAkCzC,QAAQ6C,UAA1C,CAAnB;AACA,WAAO;AACLC,YAAM,aADD;AAELxC,sBAAgBsC,KAFX;AAGLnC;AAHK,KAAP;AAKD,GARa,CAAd;AASA;AACA,SAAOiC,OAAP;AACD;;AAEDK,OAAOC,OAAP,GAAiB;AACfjD,0BADe;AAEf+B;AAFe,CAAjB","file":"mergeHelper.js","sourcesContent":["\nvar fs = require('fs')\nvar mkdirp = require('mkdirp')\nvar path = require('path')\n/**\n * this merges source file to target file, using regexp to\n * move target file data into the source file before copying\n * to the destinatioin.\n merge sections\n // CUSTOM_HEADER_START\n // CUSTOM_HEADER_END\n // CUSTOM_TOP_START\n // CUSTOM_TOP_END\n // CUSTOM_MIDDLE_START\n // CUSTOM_MIDDLE_END\n // CUSTOM_BOTTOM_START\n // CUSTOM_BOTTOM_END\n*/\n\n/**\n  returns true if the destination file changed\n  */\nfunction mergeAction (answers, config, plop ) {\n  let sections = []\n  const src = fs.readFileSync(config.sourceFileName, {encoding: 'utf-8'})\n  let dest;\n  try {\n    dest = fs.readFileSync(config.destFileName, {encoding: 'utf-8'})\n  }\n  catch(err) {\n    // dest does not exist, so just copy the src to the destination\n    let p = path.dirname( config.destFileName )\n    mkdirp.sync( p )\n    fs.writeFileSync(config.destFileName, src)\n    return 'New File, ' + config.destFileName;\n  }\n\n//  dest.replace(/CUSTOM_(.*?)_START/g, function(match, $1, $2, offset, original) {\n  dest.replace(/CUSTOM_(.*?)_START/g, function(match, $1, $2, offset, original) {\n    sections.push($1)\n  });\n\n  // console.log(sections)\n\n  let data = {}\n  let newDest = src\n  sections.forEach( key => {\n    let stg = `(CUSTOM_${key}_START)([\\\\s\\\\S]*)(CUSTOM_${key}_END)`\n    // console.log( stg )\n    let regexp = new RegExp(stg, 'm')\n    dest.replace(regexp, function( match, $1, $2, $3, offset, original) {\n      data[key] = $2\n    })\n    newDest = newDest.replace(regexp, function(match, $1, $2, $3) {\n      return $1 + data[key] + $3\n    })\n  })\n\n  //console.log( data )\n  //console.log( newDest )\n\n  if (newDest !== dest ) {\n    fs.writeFileSync( config.destFileName, newDest);\n    return 'File updated, ' + config.destFileName;\n  }\n  return 'File not changed.';\n}\n\nfunction mergeFolders( answers ) {\n  let allNames = [];\n\n  function getFileNames( dir ) {\n    let stat = fs.statSync( dir )\n    if (stat.isFile()) {\n      allNames.push( dir )\n    }\n    else {\n      let names = fs.readdirSync( dir );\n      names.forEach( (name) => {\n        getFileNames( path.join( dir, name ))\n      })\n    }\n  }\n\n  getFileNames( answers.srcFolder );\n\n  let actions = allNames.map( (fname) => {\n    fname = './' + fname\n    let destFileName = fname.replace( answers.srcFolder, answers.destFolder);\n    return {\n      type: 'mergeAction',\n      sourceFileName: fname,\n      destFileName\n    }\n  });\n  // console.log(actions)\n  return actions;\n}\n\nmodule.exports = {\n  mergeAction,\n  mergeFolders\n}\n"]}